package com.khoi.lab.entity;

import com.khoi.lab.enums.UserPermission;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for the Role entity.
 * This class tests the basic functionality of the entity, including
 * constructors,
 * getters, setters, and custom equals/hashCode methods.
 */
public class RoleTest {
    private Role role;
    private static final String TEST_ROLE_NAME = "ADMIN";
    private static final List<UserPermission> TEST_PERMISSIONS = Arrays.asList(UserPermission.CREATE_DONATIONS,
            UserPermission.CREATE_COMMENTS);
    private static final int TEST_POWER_LEVEL = 99;

    @BeforeEach
    void setUp() {
        // Initialize a new Role instance before each test
        this.role = new Role(TEST_ROLE_NAME, TEST_PERMISSIONS);
    }

    @Test
    void testConstructorWithTwoArguments() {
        // Verify that the constructor correctly sets the roleName, permissions, and
        // default powerLevel
        assertNotNull(role, "Role instance should not be null.");
        assertEquals(TEST_ROLE_NAME, role.getRoleName(), "The role name should be set correctly.");
        assertEquals(TEST_PERMISSIONS, role.getPermissions(), "The permissions list should be set correctly.");
        assertEquals(1, role.getPowerLevel(), "The default power level should be 1.");
        assertNull(role.getId(), "The ID should be null initially as it's generated by the database.");
    }

    @Test
    void testConstructorWithThreeArguments() {
        // Test the constructor that includes powerLevel
        Role customRole = new Role(TEST_ROLE_NAME, TEST_PERMISSIONS, TEST_POWER_LEVEL);
        assertEquals(TEST_POWER_LEVEL, customRole.getPowerLevel(),
                "The power level should be set correctly by the constructor.");
    }

    @Test
    void testGettersAndSetters() {
        // Test the ID setter and getter
        Long testId = 100L;
        role.setId(testId);
        assertEquals(testId, role.getId(), "The ID getter should return the value set by the setter.");

        // Test the roleName setter and getter
        String newRoleName = "GUEST";
        role.setRoleName(newRoleName);
        assertEquals(newRoleName, role.getRoleName(),
                "The role name getter should return the value set by the setter.");

        // Test the permissions setter and getter
        List<UserPermission> newPermissions = Arrays.asList(UserPermission.VIEW_DASHBOARD);
        role.setPermissions(newPermissions);
        assertEquals(newPermissions, role.getPermissions(),
                "The permissions getter should return the value set by the setter.");

        // Test the powerLevel setter and getter
        int newPowerLevel = 50;
        role.setPowerLevel(newPowerLevel);
        assertEquals(newPowerLevel, role.getPowerLevel(),
                "The power level getter should return the value set by the setter.");
    }

    @Test
    void testEqualsAndHashCode() {
        // Test equality with objects having the same ID
        Role role1 = new Role("Role A", Arrays.asList());
        role1.setId(1L);

        Role role2 = new Role("Role B", Arrays.asList());
        role2.setId(1L);

        Role role3 = new Role("Role C", Arrays.asList());
        role3.setId(2L);

        // Verify that two roles with the same ID are equal and have the same hashCode
        assertEquals(role1, role2, "Roles with the same ID should be equal.");
        assertEquals(role1.hashCode(), role2.hashCode(), "Roles with the same ID should have the same hashCode.");

        // Verify that two roles with different IDs are not equal
        assertNotEquals(role1, role3, "Roles with different IDs should not be equal.");
        assertNotEquals(role1.hashCode(), role3.hashCode(),
                "Roles with different IDs should have different hashCodes.");

        // Test equals with null and different objects
        assertNotEquals(role1, null, "A role should not be equal to null.");
        assertNotEquals(role1, "not a role", "A role should not be equal to a different object type.");
    }
}
